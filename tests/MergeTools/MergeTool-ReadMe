
#Merge Tool 
### - A Python Tool for SimObserver Data -
____
## Overview
&nbsp;&nbsp;&nbsp;&nbsp; Merge Tools is a program designed to effectively merge SimObserver data in the event that a
particpant's drive is interrupted. This often occurs due to study interruptions such as
SimCreator shut downs. To combat this potential data loss, Merge Tools accepts a directory 
of seperate data files from the same participant's drive and merges them into one file
to ensure a uniform presentation of the data. 
	  
  *For example*:<br>
  &nbsp;&nbsp;&nbsp;&nbsp; If during a study, called 'ExampleProject', Participant 3's drive 1 was interrupted 
		by two SimCreator shut downs, there would be 3 seperate data files created.
		'ExampleProject_Sub_3_Drive_1.dat', 'ExampleProject_Sub_3_Drive_10.dat', and 
		'ExampleProject_Sub_3_Drive_11.dat' would have to be present in the `merge directory`
		(-d) to produce a single, usable data file named 'ExampleProject_Sub_3_Drive_0.dat'.
	  

### Merge Types:
___
   This section is to be filled in later, highlighting the function of each merge type.
   1) Sequential - WHAT THEY DO
   2) Spatial - WHAT THEY DO
	
### Usage:
___
This section is to be filled later, similar to Soda's usage.
   - Command Line execution
   - Two Args. 
		1) -d (DataFile directory). Seems to be the directory where unmerged files are.
		2) -t (Merge Type). Chosen as either "Spatial" or "Sequential".


### Testing:
___
Within the `pydre` folder, there will be a `test` directory with a sub-directory called 
`MergeTools`. This sub-directory contains all the materials for testing `pydre_merge.py`.
To run the tests, navigate to the pydre module directory (top level) and use the command:
`python -m unittest tests\MergeTools\test_merge.py`. <br>
	  
#### Testing Explanation:
- There are two, primary functions to test within `merge_tool.py`, one for each merge 
		  type (`Sequential` and `Spatial`). These two functions are found at (considering 
		  `pydre.merge_tool` as `p_merge`) `p_merge.MergeTool.sequential_merge()` and 
		  `p_merge.MergeTool.spatial_merge()`(see `Overview` above for merge-type
		   explanations).
		
- To properly test each of these, the testing functions must supply the two,
		  required parameters without using the command line (refer to `Usage` above).
		  Briefly, below will address how each argument is supplied in the testing. <br>

1) Merge Directory (-d) - Within `MergeTools\test_dats_to_merge\` there are a host of 
directories. Each of these directories is unique per test
case and will contain particular data files to simulate the 
intended use of the program.
		
2) Merge Type (-t) - Supplied as a string within the test case, unique to the target 
`MergeTool()` function of the current test.
		 
#### Results and Expected:
This section will cover the results from running the program, the expected
results, and how the two will be compared for the sake of testing. <br>

Results:<br>
&nbsp;&nbsp;&nbsp;&nbsp; After calling the target function (either `Sequential` or `Spatial`) with the two
parameters from the test case, the program, after running successfully, will create
a `.csv` file per participant found in the `Merge Directory (-d)`. This `.csv` file(s)
can always be found in `MergeTools\test_dats_to_merge\current-dir\MergedData\`. With that, using the
`pandas` module for Python, it is easy to recover the contents of the `.csv`.
			
Expected:<br>
&nbsp;&nbsp;&nbsp;&nbsp; Within `MergeTools\expected_csv` there will be a sub-directory for every test.
Each of these sub-directories will be named with the prefix `expected_` followed
by the `Merge Directory (-d)` name. (Ex: with "-d test_dats_to_merge/ref_dir"
the expected csv will be found at `MergeTools\expected_csv\expected_ref_dir\`).
These directories and their contents must be prepared prior to testing, as these 
`.csv` files' are recovered using `pandas` as well.

- With both the results and expected results in the testing program, the contents
of both `.csv` files will be compared. In order for the `MergeTool()` function
to pass the test, it must produce a `.csv` file that is exactly the same as the
corresponding file found in `\expected_csv\`.

- Note: For streamlined testing, `/MergedData/` is completely removed after
each test case. This ensures `test_merge.py` will have easy access to only the
pertinent results of the current, running test case.